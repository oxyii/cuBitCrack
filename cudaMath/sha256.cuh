#ifndef _SHA256_CUH
#define _SHA256_CUH

#include <cuda.h>
#include <cuda_runtime.h>

#include <stdio.h>

#include "uint256.h"

__constant__ unsigned int _K[64] = {
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

__constant__ unsigned int _IV[8] = {
	0x6a09e667,
	0xbb67ae85,
	0x3c6ef372,
	0xa54ff53a,
	0x510e527f,
	0x9b05688c,
	0x1f83d9ab,
	0x5be0cd19};

/*
ASM implementations of SHA256 functions: more stable but not faster (-0.5% on RTX 4060)

__device__ __forceinline__ unsigned int s0(unsigned int x)
{
	unsigned int r7, r18, r3, temp;
	sha_rotr(r7, x, 7);
	sha_rotr(r18, x, 18);
	sha_shr(r3, x, 3);
	sha_xor(temp, r7, r18);
	sha_xor(temp, temp, r3);
	return temp;
}

__device__ __forceinline__ unsigned int s1(unsigned int x)
{
	unsigned int r17, r19, r10, temp;
	sha_rotr(r17, x, 17);
	sha_rotr(r19, x, 19);
	sha_shr(r10, x, 10);
	sha_xor(temp, r17, r19);
	sha_xor(temp, temp, r10);
	return temp;
}

__device__ __forceinline__ void round(unsigned int a, unsigned int b, unsigned int c, unsigned int &d, unsigned int e, unsigned int f, unsigned int g, unsigned int &h, unsigned int m, unsigned int k)
{
	unsigned int ch_result, e_rot6, e_rot11, e_rot25, e_sigma1;
	unsigned int maj_result, a_rot2, a_rot13, a_rot22, a_sigma0;
	unsigned int s, temp1, temp2, new_d, new_h;

	// CH(e, f, g) = (e & f) ^ (~e & g)
	sha_ch(ch_result, e, f, g);

	// Sigma1(e) = rotr(e, 6) ^ rotr(e, 11) ^ rotr(e, 25)
	sha_rotr(e_rot6, e, 6);
	sha_rotr(e_rot11, e, 11);
	sha_rotr(e_rot25, e, 25);
	sha_xor(temp1, e_rot6, e_rot11);
	sha_xor(e_sigma1, temp1, e_rot25);

	// s = CH(e,f,g) + Sigma1(e) + k + m
	sha_add(temp1, ch_result, e_sigma1);
	sha_add(temp2, k, m);
	sha_add(s, temp1, temp2);

	// d += s + h
	sha_add(temp1, s, h);
	sha_add(new_d, d, temp1);

	// MAJ(a, b, c) = (a & b) | (a & c) | (b & c)
	sha_maj(maj_result, a, b, c);

	// Sigma0(a) = rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22)
	sha_rotr(a_rot2, a, 2);
	sha_rotr(a_rot13, a, 13);
	sha_rotr(a_rot22, a, 22);
	sha_xor(temp1, a_rot2, a_rot13);
	sha_xor(a_sigma0, temp1, a_rot22);

	// h += s + MAJ(a,b,c) + Sigma0(a)
	sha_add(temp1, s, maj_result);
	sha_add(temp2, temp1, a_sigma0);
	sha_add(new_h, h, temp2);

	// Store results
	d = new_d;
	h = new_h;
}

*/

__device__ unsigned int rotr(unsigned int x, int n)
{
	return (x >> n) ^ (x << (32 - n));
}

__device__ unsigned int MAJ(unsigned int a, unsigned int b, unsigned int c)
{
	return (a & b) ^ (a & c) ^ (b & c);
}

__device__ unsigned int CH(unsigned int e, unsigned int f, unsigned int g)
{
	return (e & f) ^ (~e & g);
}

__device__ unsigned int s0(unsigned int x)
{
	return rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3);
}

__device__ unsigned int s1(unsigned int x)
{
	return rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10);
}

__device__ void round(unsigned int a, unsigned int b, unsigned int c, unsigned int &d, unsigned e, unsigned int f, unsigned int g, unsigned int &h, unsigned int m, unsigned int k)
{
	unsigned int s = CH(e, f, g) + (rotr(e, 6) ^ rotr(e, 11) ^ rotr(e, 25)) + k + m;

	d += s + h;

	h += s + MAJ(a, b, c) + (rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22));
}

__device__ void sha256PublicKey(const uint256_buf &x, const uint256_buf &y, uint256 &digest)
{
	uint256 w1, w2, j = _IV;

	// 0x04 || x || y
	w1[0] = (x[0] >> 8) | 0x04000000;
	w1[1] = (x[1] >> 8) | (x[0] << 24);
	w1[2] = (x[2] >> 8) | (x[1] << 24);
	w1[3] = (x[3] >> 8) | (x[2] << 24);
	w1[4] = (x[4] >> 8) | (x[3] << 24);
	w1[5] = (x[5] >> 8) | (x[4] << 24);
	w1[6] = (x[6] >> 8) | (x[5] << 24);
	w1[7] = (x[7] >> 8) | (x[6] << 24);
	w2[0] = (y[0] >> 8) | (x[7] << 24);
	w2[1] = (y[1] >> 8) | (y[0] << 24);
	w2[2] = (y[2] >> 8) | (y[1] << 24);
	w2[3] = (y[3] >> 8) | (y[2] << 24);
	w2[4] = (y[4] >> 8) | (y[3] << 24);
	w2[5] = (y[5] >> 8) | (y[4] << 24);
	w2[6] = (y[6] >> 8) | (y[5] << 24);
	w2[7] = (y[7] >> 8) | (y[6] << 24);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[0]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[1]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[2]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[3]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[4]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[5]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[6]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[7]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[8]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[9]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[10]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[11]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[12]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[13]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[14]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[15]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[16]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[17]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[18]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[19]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[20]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[21]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[22]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[23]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[24]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[25]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[26]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[27]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[28]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[29]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[30]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[31]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[32]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[33]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[34]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[35]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[36]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[37]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[38]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[39]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[40]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[41]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[42]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[43]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[44]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[45]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[46]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[47]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[48]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[49]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[50]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[51]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[52]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[53]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[54]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[55]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[56]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[57]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[58]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[59]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[60]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[61]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[62]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[63]);

	j[0] += _IV[0];
	j[1] += _IV[1];
	j[2] += _IV[2];
	j[3] += _IV[3];
	j[4] += _IV[4];
	j[5] += _IV[5];
	j[6] += _IV[6];
	j[7] += _IV[7];

	// store the intermediate hash value
	uint256 tmp = j;

	w1[0] = (y[7] << 24) | 0x00800000;
	w2[7] = 65 * 8;

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[0]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], 0, _K[1]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], 0, _K[2]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], 0, _K[3]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], 0, _K[4]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], 0, _K[5]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], 0, _K[6]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], 0, _K[7]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], 0, _K[8]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], 0, _K[9]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], 0, _K[10]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], 0, _K[11]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], 0, _K[12]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], 0, _K[13]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], 0, _K[14]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[15]);

	w1[0] = w1[0] + s0(0) + 0 + s1(0);
	w1[1] = 0 + s0(0) + 0 + s1(w2[7]);
	w1[2] = 0 + s0(0) + 0 + s1(w1[0]);
	w1[3] = 0 + s0(0) + 0 + s1(w1[1]);
	w1[4] = 0 + s0(0) + 0 + s1(w1[2]);
	w1[5] = 0 + s0(0) + 0 + s1(w1[3]);
	w1[6] = 0 + s0(0) + w2[7] + s1(w1[4]);
	w1[7] = 0 + s0(0) + w1[0] + s1(w1[5]);
	w2[0] = 0 + s0(0) + w1[1] + s1(w1[6]);
	w2[1] = 0 + s0(0) + w1[2] + s1(w1[7]);
	w2[2] = 0 + s0(0) + w1[3] + s1(w2[0]);
	w2[3] = 0 + s0(0) + w1[4] + s1(w2[1]);
	w2[4] = 0 + s0(0) + w1[5] + s1(w2[2]);
	w2[5] = 0 + s0(0) + w1[6] + s1(w2[3]);
	w2[6] = 0 + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[16]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[17]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[18]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[19]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[20]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[21]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[22]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[23]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[24]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[25]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[26]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[27]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[28]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[29]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[30]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[31]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[32]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[33]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[34]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[35]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[36]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[37]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[38]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[39]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[40]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[41]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[42]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[43]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[44]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[45]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[46]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[47]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[48]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[49]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[50]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[51]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[52]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[53]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[54]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[55]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[56]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[57]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[58]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[59]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[60]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[61]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[62]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[63]);

	digest[0] = tmp[0] + j[0];
	digest[1] = tmp[1] + j[1];
	digest[2] = tmp[2] + j[2];
	digest[3] = tmp[3] + j[3];
	digest[4] = tmp[4] + j[4];
	digest[5] = tmp[5] + j[5];
	digest[6] = tmp[6] + j[6];
	digest[7] = tmp[7] + j[7];
}

__device__ void sha256PublicKeyCompressed(const uint256_buf &x, unsigned int yParity, uint256 &digest)
{
	uint256 w1, w2, j = _IV;

	// 0x03 || x  or  0x02 || x
	w1[0] = 0x02000000 | ((yParity & 1) << 24) | (x[0] >> 8);

	w1[1] = (x[1] >> 8) | (x[0] << 24);
	w1[2] = (x[2] >> 8) | (x[1] << 24);
	w1[3] = (x[3] >> 8) | (x[2] << 24);
	w1[4] = (x[4] >> 8) | (x[3] << 24);
	w1[5] = (x[5] >> 8) | (x[4] << 24);
	w1[6] = (x[6] >> 8) | (x[5] << 24);
	w1[7] = (x[7] >> 8) | (x[6] << 24);
	w2[0] = (x[7] << 24) | 0x00800000;
	w2[7] = 33 * 8;

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[0]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[1]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[2]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[3]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[4]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[5]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[6]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[7]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[8]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], 0, _K[9]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], 0, _K[10]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], 0, _K[11]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], 0, _K[12]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], 0, _K[13]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], 0, _K[14]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[15]);

	w1[0] = w1[0] + s0(w1[1]) + 0 + s1(0);
	w1[1] = w1[1] + s0(w1[2]) + 0 + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + 0 + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + 0 + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + 0 + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + 0 + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(0) + w1[1] + s1(w1[6]);
	w2[1] = 0 + s0(0) + w1[2] + s1(w1[7]);
	w2[2] = 0 + s0(0) + w1[3] + s1(w2[0]);
	w2[3] = 0 + s0(0) + w1[4] + s1(w2[1]);
	w2[4] = 0 + s0(0) + w1[5] + s1(w2[2]);
	w2[5] = 0 + s0(0) + w1[6] + s1(w2[3]);
	w2[6] = 0 + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[16]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[17]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[18]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[19]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[20]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[21]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[22]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[23]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[24]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[25]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[26]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[27]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[28]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[29]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[30]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[31]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[32]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[33]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[34]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[35]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[36]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[37]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[38]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[39]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[40]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[41]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[42]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[43]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[44]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[45]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[46]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[47]);

	w1[0] = w1[0] + s0(w1[1]) + w2[1] + s1(w2[6]);
	w1[1] = w1[1] + s0(w1[2]) + w2[2] + s1(w2[7]);
	w1[2] = w1[2] + s0(w1[3]) + w2[3] + s1(w1[0]);
	w1[3] = w1[3] + s0(w1[4]) + w2[4] + s1(w1[1]);
	w1[4] = w1[4] + s0(w1[5]) + w2[5] + s1(w1[2]);
	w1[5] = w1[5] + s0(w1[6]) + w2[6] + s1(w1[3]);
	w1[6] = w1[6] + s0(w1[7]) + w2[7] + s1(w1[4]);
	w1[7] = w1[7] + s0(w2[0]) + w1[0] + s1(w1[5]);
	w2[0] = w2[0] + s0(w2[1]) + w1[1] + s1(w1[6]);
	w2[1] = w2[1] + s0(w2[2]) + w1[2] + s1(w1[7]);
	w2[2] = w2[2] + s0(w2[3]) + w1[3] + s1(w2[0]);
	w2[3] = w2[3] + s0(w2[4]) + w1[4] + s1(w2[1]);
	w2[4] = w2[4] + s0(w2[5]) + w1[5] + s1(w2[2]);
	w2[5] = w2[5] + s0(w2[6]) + w1[6] + s1(w2[3]);
	w2[6] = w2[6] + s0(w2[7]) + w1[7] + s1(w2[4]);
	w2[7] = w2[7] + s0(w1[0]) + w2[0] + s1(w2[5]);

	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w1[0], _K[48]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w1[1], _K[49]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w1[2], _K[50]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w1[3], _K[51]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w1[4], _K[52]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w1[5], _K[53]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w1[6], _K[54]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w1[7], _K[55]);
	round(j[0], j[1], j[2], j[3], j[4], j[5], j[6], j[7], w2[0], _K[56]);
	round(j[7], j[0], j[1], j[2], j[3], j[4], j[5], j[6], w2[1], _K[57]);
	round(j[6], j[7], j[0], j[1], j[2], j[3], j[4], j[5], w2[2], _K[58]);
	round(j[5], j[6], j[7], j[0], j[1], j[2], j[3], j[4], w2[3], _K[59]);
	round(j[4], j[5], j[6], j[7], j[0], j[1], j[2], j[3], w2[4], _K[60]);
	round(j[3], j[4], j[5], j[6], j[7], j[0], j[1], j[2], w2[5], _K[61]);
	round(j[2], j[3], j[4], j[5], j[6], j[7], j[0], j[1], w2[6], _K[62]);
	round(j[1], j[2], j[3], j[4], j[5], j[6], j[7], j[0], w2[7], _K[63]);

	digest[0] = j[0] + _IV[0];
	digest[1] = j[1] + _IV[1];
	digest[2] = j[2] + _IV[2];
	digest[3] = j[3] + _IV[3];
	digest[4] = j[4] + _IV[4];
	digest[5] = j[5] + _IV[5];
	digest[6] = j[6] + _IV[6];
	digest[7] = j[7] + _IV[7];
}

#endif